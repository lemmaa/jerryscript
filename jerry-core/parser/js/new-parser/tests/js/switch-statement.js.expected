
--- Script parsing start ---

  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_MULTIPLY_TWO_LITERALS idx:1->ident(a) idx:2->ident(b)
  [  1] CBC_SUBTRACT_RIGHT_LITERAL idx:3->ident(c)
  [  0] CBC_POP
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:4->ident(x)
  [  0] CBC_POP
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:4->ident(x) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(y) byte_arg:0
  [  2] CBC_MULTIPLY_TWO_LITERALS idx:2->ident(b) idx:3->ident(c)
  [  2] CBC_ADD_LEFT_LITERAL idx:1->ident(a)
  [  2] CBC_SWITCH_STRICT_EQUAL
  [  1] CBC_BRANCH_IF_TRUE_FORWARD
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  2] CBC_SWITCH_STRICT_EQUAL
  [  1] CBC_BRANCH_IF_TRUE_FORWARD
  [  2] CBC_PUSH_IDENT idx:3->ident(c)
  [  2] CBC_SWITCH_STRICT_EQUAL
  [  1] CBC_BRANCH_IF_TRUE_FORWARD
  [  2] CBC_CALL_IDENT_PUSH_RESULT idx:6->ident(d) byte_arg:0
  [  2] CBC_ADD_LEFT_LITERAL idx:6->ident(d)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(y) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  2] CBC_PUSH_IDENT idx:1->ident(a)
  [  2] CBC_SWITCH_STRICT_EQUAL
  [  1] CBC_BRANCH_IF_TRUE_FORWARD
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:8->ident(n)
  [  2] CBC_PUSH_IDENT idx:1->ident(a)
  [  2] CBC_SWITCH_STRICT_EQUAL
  [  1] CBC_BRANCH_IF_TRUE_FORWARD
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:1->ident(a)
  [  0] CBC_POP_BLOCK
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:3->ident(c)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:2->ident(b)
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:7->ident(z) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(y) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:5->ident(y) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:5->ident(y)
  [  2] CBC_PUSH_IDENT idx:1->ident(a)
  [  2] CBC_SWITCH_STRICT_EQUAL
  [  1] CBC_BRANCH_IF_TRUE_FORWARD
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  2] CBC_SWITCH_STRICT_EQUAL
  [  1] CBC_BRANCH_IF_TRUE_FORWARD
  [  2] CBC_PUSH_IDENT idx:3->ident(c)
  [  2] CBC_SWITCH_STRICT_EQUAL
  [  1] CBC_BRANCH_IF_TRUE_FORWARD
  [  2] CBC_PUSH_IDENT idx:3->ident(c)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CALL_IDENT_PUSH_RESULT idx:1->ident(a) byte_arg:0
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_IDENT idx:8->ident(n)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_FALSE
  [  0] CBC_POP
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_NULL
  [  2] CBC_PUSH_IDENT idx:1->ident(a)
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_IDENT idx:2->ident(b)
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_IDENT idx:3->ident(c)
  [  3] CBC_PUSH_IDENT idx:8->ident(n)
  [  2] CBC_BRANCH_IF_FALSE_FORWARD
  [  3] CBC_PUSH_TRUE
  [  3] CBC_JUMP_FORWARD
  [  3] CBC_PUSH_FALSE
  [  2] CBC_PROP_GET
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_FALSE
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TRUE
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_IDENT idx:6->ident(d)
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_IDENT idx:9->ident(e)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:10->ident(f)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_IDENT idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 3
  Literal encoding: small
  Argument range end: 0
  Register range end: 0
  Identifier range end: 11
  Const literal range end: 11
  Literal range end: 11

   0 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_MULTIPLY_TWO_LITERALS idx:1(ident)->ident(a) idx:2(ident)->ident(b)
   6 : CBC_SUBTRACT_RIGHT_LITERAL idx:3(ident)->ident(c)
   8 : CBC_POP
   9 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
  11 : CBC_POP_BLOCK
  12 : CBC_PUSH_IDENT idx:4(ident)->ident(x)
  14 : CBC_POP
  15 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:4(ident)->ident(x)
  18 : CBC_POP_BLOCK
  19 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
  21 : CBC_POP_BLOCK
  22 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(y)
  25 : CBC_MULTIPLY_TWO_LITERALS idx:2(ident)->ident(b) idx:3(ident)->ident(c)
  28 : CBC_ADD_LEFT_LITERAL idx:1(ident)->ident(a)
  30 : CBC_SWITCH_STRICT_EQUAL
  31 : CBC_BRANCH_IF_TRUE_FORWARD offset:22(->53)
  33 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
  35 : CBC_SWITCH_STRICT_EQUAL
  36 : CBC_BRANCH_IF_TRUE_FORWARD offset:89(->125)
  38 : CBC_PUSH_IDENT idx:3(ident)->ident(c)
  40 : CBC_SWITCH_STRICT_EQUAL
  41 : CBC_BRANCH_IF_TRUE_FORWARD offset:84(->125)
  43 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:6(ident)->ident(d)
  46 : CBC_ADD_LEFT_LITERAL idx:6(ident)->ident(d)
  48 : CBC_STRICT_EQUAL
  49 : CBC_BRANCH_IF_TRUE_FORWARD offset:80(->129)
  51 : CBC_JUMP_FORWARD offset:78(->129)
  53 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(y)
  56 : CBC_POP_BLOCK
  57 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
  60 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
  62 : CBC_SWITCH_STRICT_EQUAL
  63 : CBC_BRANCH_IF_TRUE_FORWARD offset:13(->76)
  65 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
  67 : CBC_STRICT_EQUAL
  68 : CBC_BRANCH_IF_TRUE_FORWARD offset:14(->82)
  70 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
  73 : CBC_POP_BLOCK
  74 : CBC_JUMP_FORWARD offset:45(->119)
  76 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
  79 : CBC_POP_BLOCK
  80 : CBC_JUMP_FORWARD offset:39(->119)
  82 : CBC_PUSH_IDENT idx:8(ident)->ident(n)
  84 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
  86 : CBC_SWITCH_STRICT_EQUAL
  87 : CBC_BRANCH_IF_TRUE_FORWARD offset:9(->96)
  89 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
  91 : CBC_STRICT_EQUAL
  92 : CBC_BRANCH_IF_TRUE_FORWARD offset:14(->106)
  94 : CBC_JUMP_FORWARD offset:7(->101)
  96 : CBC_JUMP_FORWARD offset:33(->129)
  98 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:1(ident)->ident(a)
 100 : CBC_POP_BLOCK
 101 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:3(ident)->ident(c)
 103 : CBC_POP_BLOCK
 104 : CBC_JUMP_FORWARD offset:5(->109)
 106 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:2(ident)->ident(b)
 108 : CBC_POP_BLOCK
 109 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
 112 : CBC_POP_BLOCK
 113 : CBC_JUMP_FORWARD offset:6(->119)
 115 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:7(ident)->ident(z)
 118 : CBC_POP_BLOCK
 119 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(y)
 122 : CBC_POP_BLOCK
 123 : CBC_JUMP_FORWARD offset:6(->129)
 125 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:5(ident)->ident(y)
 128 : CBC_POP_BLOCK
 129 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 131 : CBC_POP_BLOCK
 132 : CBC_JUMP_FORWARD offset:36(->168)
 134 : CBC_PUSH_IDENT idx:5(ident)->ident(y)
 136 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
 138 : CBC_SWITCH_STRICT_EQUAL
 139 : CBC_BRANCH_IF_TRUE_FORWARD offset:17(->156)
 141 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
 143 : CBC_SWITCH_STRICT_EQUAL
 144 : CBC_BRANCH_IF_TRUE_FORWARD offset:12(->156)
 146 : CBC_PUSH_IDENT idx:3(ident)->ident(c)
 148 : CBC_SWITCH_STRICT_EQUAL
 149 : CBC_BRANCH_IF_TRUE_FORWARD offset:13(->162)
 151 : CBC_PUSH_IDENT idx:3(ident)->ident(c)
 153 : CBC_STRICT_EQUAL
 154 : CBC_BRANCH_IF_TRUE_FORWARD offset:10(->164)
 156 : CBC_CALL_IDENT_PUSH_RESULT byte_arg:0 idx:1(ident)->ident(a)
 159 : CBC_POP_BLOCK
 160 : CBC_JUMP_FORWARD offset:8(->168)
 162 : CBC_JUMP_FORWARD offset:6(->168)
 164 : CBC_JUMP_FORWARD offset:4(->168)
 166 : CBC_JUMP_FORWARD offset:6(->172)
 168 : CBC_PUSH_IDENT idx:8(ident)->ident(n)
 170 : CBC_BRANCH_IF_TRUE_BACKWARD offset:36(->134)
 172 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 174 : CBC_POP_BLOCK
 175 : CBC_PUSH_FALSE
 176 : CBC_POP
 177 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 179 : CBC_POP_BLOCK
 180 : CBC_PUSH_NULL
 181 : CBC_PUSH_IDENT idx:1(ident)->ident(a)
 183 : CBC_BRANCH_IF_FALSE_FORWARD offset:29(->212)
 185 : CBC_PUSH_IDENT idx:2(ident)->ident(b)
 187 : CBC_BRANCH_IF_FALSE_FORWARD offset:21(->208)
 189 : CBC_PUSH_IDENT idx:3(ident)->ident(c)
 191 : CBC_PUSH_IDENT idx:8(ident)->ident(n)
 193 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->198)
 195 : CBC_PUSH_TRUE
 196 : CBC_JUMP_FORWARD offset:3(->199)
 198 : CBC_PUSH_FALSE
 199 : CBC_PROP_GET
 200 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->205)
 202 : CBC_PUSH_FALSE
 203 : CBC_JUMP_FORWARD offset:3(->206)
 205 : CBC_PUSH_TRUE
 206 : CBC_JUMP_FORWARD offset:4(->210)
 208 : CBC_PUSH_IDENT idx:6(ident)->ident(d)
 210 : CBC_JUMP_FORWARD offset:4(->214)
 212 : CBC_PUSH_IDENT idx:9(ident)->ident(e)
 214 : CBC_STRICT_EQUAL
 215 : CBC_BRANCH_IF_TRUE_FORWARD offset:4(->219)
 217 : CBC_JUMP_FORWARD offset:5(->222)
 219 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:10(ident)->ident(f)
 221 : CBC_POP_BLOCK
 222 : CBC_PUSH_IDENT idx:0(ident)->ident(next_statement)
 224 : CBC_POP_BLOCK
 225 : CBC_RETURN_WITH_UNDEFINED

Byte code size: 226 bytes

Script parsing successfully completed. Total byte code size: 226 bytes

--- Script parsing end ---

